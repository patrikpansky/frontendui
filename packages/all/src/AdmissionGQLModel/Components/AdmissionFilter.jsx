
/**
 * Generated filter form for AdmissionInputFilter (for type AdmissionGQLModel), Bootstrap styl, single field selection.
 * Generated by generate-hasura-filter-form.js
 */
import React from "react";


export function AdmissionInputFilterForm({ value = {}, onChange }) {
    // Jediný aktivní field v hodnotě (kromě _and/_or)
    const [selectedField, setSelectedField] = React.useState(Object.keys(value).find(k => !k.startsWith('_')) || "");
    const [operand, setOperand] = React.useState(selectedField ? value[selectedField] : "");

    React.useEffect(() => {
        // Pokud value v props změní pole, aktualizuj stav
        const current = Object.keys(value).find(k => !k.startsWith('_'));
        if (current !== selectedField) {
            setSelectedField(current || "");
            setOperand(current ? value[current] : "");
        }
    }, [value]);

    // Handler změny operátoru
    function handleFieldChange(e) {
        const f = e.target.value;
        setSelectedField(f);
        setOperand("");
        onChange({ [f]: "" }); // Vynuluj ostatní
    }

    // Handler změny hodnoty operand
    function handleOperandChange(e) {
        setOperand(e.target.value);
        onChange({ [selectedField]: e.target.value });
    }

    return (
        <div className="border p-3 mb-3">
            {/* Scalar operátor */}
            <div className="mb-3">
                <label className="form-label">Pole/operátor</label>
                <select className="form-select" value={selectedField} onChange={handleFieldChange}>
                    <option value="">Vyber operátor…</option>
                    <option value="id">id</option>
<option value="programId">programId</option>
<option value="stateId">stateId</option>
<option value="paymentInfoId">paymentInfoId</option>
<option value="name">name</option>
<option value="name_en">name_en</option>
<option value="application_start_date">application_start_date</option>
<option value="application_last_date">application_last_date</option>
<option value="end_date">end_date</option>
<option value="condition_date">condition_date</option>
<option value="payment_date">payment_date</option>
<option value="condition_extended_date">condition_extended_date</option>
<option value="request_condition_extend_date">request_condition_extend_date</option>
<option value="request_extra_conditions_date">request_extra_conditions_date</option>
<option value="request_extra_date_date">request_extra_date_date</option>
<option value="exam_start_date">exam_start_date</option>
<option value="exam_last_date">exam_last_date</option>
<option value="student_entry_date">student_entry_date</option>
<option value="payment_info">payment_info</option>
                </select>
            </div>
            {selectedField &&
                <div className="mb-3">
                    <input
                        className="form-control"
                        type="text"
                        value={operand}
                        onChange={handleOperandChange}
                        placeholder={"Zadej hodnotu"}
                    />
                </div>
            }

            {/* Logická pole */}
            
            <div className="mb-3">
                <label>_OR</label>
                {(value._or || []).map((item, idx) => (
                    <AdmissionInputFilterForm
                        key={idx}
                        value={item}
                        onChange={v => {
                            const arr = [...(value._or || [])];
                            arr[idx] = v;
                            onChange({ ...value, _or: arr });
                        }}
                        parentLogical="_or"
                    />
                ))}
                <button
                    className="btn btn-outline-primary btn-sm mt-1"
                    type="button"
                    onClick={() => onChange({ ...value, _or: [...(value._or || []), {}] })}
                >
                    Přidat skupinu
                </button>
            </div>
            

            <div className="mb-3">
                <label>_AND</label>
                {(value._and || []).map((item, idx) => (
                    <AdmissionInputFilterForm
                        key={idx}
                        value={item}
                        onChange={v => {
                            const arr = [...(value._and || [])];
                            arr[idx] = v;
                            onChange({ ...value, _and: arr });
                        }}
                        parentLogical="_and"
                    />
                ))}
                <button
                    className="btn btn-outline-primary btn-sm mt-1"
                    type="button"
                    onClick={() => onChange({ ...value, _and: [...(value._and || []), {}] })}
                >
                    Přidat skupinu
                </button>
            </div>
            
        </div>
    );
}

export function UuidFilterForm({ value = {}, onChange }) {
    // Jediný aktivní field v hodnotě (kromě _and/_or)
    const [selectedField, setSelectedField] = React.useState(Object.keys(value).find(k => !k.startsWith('_')) || "");
    const [operand, setOperand] = React.useState(selectedField ? value[selectedField] : "");

    React.useEffect(() => {
        // Pokud value v props změní pole, aktualizuj stav
        const current = Object.keys(value).find(k => !k.startsWith('_'));
        if (current !== selectedField) {
            setSelectedField(current || "");
            setOperand(current ? value[current] : "");
        }
    }, [value]);

    // Handler změny operátoru
    function handleFieldChange(e) {
        const f = e.target.value;
        setSelectedField(f);
        setOperand("");
        onChange({ [f]: "" }); // Vynuluj ostatní
    }

    // Handler změny hodnoty operand
    function handleOperandChange(e) {
        setOperand(e.target.value);
        onChange({ [selectedField]: e.target.value });
    }

    return (
        <div className="border p-3 mb-3">
            {/* Scalar operátor */}
            <div className="mb-3">
                <label className="form-label">Pole/operátor</label>
                <select className="form-select" value={selectedField} onChange={handleFieldChange}>
                    <option value="">Vyber operátor…</option>
                    <option value="_eq">_eq</option>
<option value="_in">_in</option>
                </select>
            </div>
            {selectedField &&
                <div className="mb-3">
                    <input
                        className="form-control"
                        type="text"
                        value={operand}
                        onChange={handleOperandChange}
                        placeholder={"Zadej hodnotu"}
                    />
                </div>
            }

            {/* Logická pole */}
            
        </div>
    );
}

export function StrFilterForm({ value = {}, onChange }) {
    // Jediný aktivní field v hodnotě (kromě _and/_or)
    const [selectedField, setSelectedField] = React.useState(Object.keys(value).find(k => !k.startsWith('_')) || "");
    const [operand, setOperand] = React.useState(selectedField ? value[selectedField] : "");

    React.useEffect(() => {
        // Pokud value v props změní pole, aktualizuj stav
        const current = Object.keys(value).find(k => !k.startsWith('_'));
        if (current !== selectedField) {
            setSelectedField(current || "");
            setOperand(current ? value[current] : "");
        }
    }, [value]);

    // Handler změny operátoru
    function handleFieldChange(e) {
        const f = e.target.value;
        setSelectedField(f);
        setOperand("");
        onChange({ [f]: "" }); // Vynuluj ostatní
    }

    // Handler změny hodnoty operand
    function handleOperandChange(e) {
        setOperand(e.target.value);
        onChange({ [selectedField]: e.target.value });
    }

    return (
        <div className="border p-3 mb-3">
            {/* Scalar operátor */}
            <div className="mb-3">
                <label className="form-label">Pole/operátor</label>
                <select className="form-select" value={selectedField} onChange={handleFieldChange}>
                    <option value="">Vyber operátor…</option>
                    <option value="_eq">_eq</option>
<option value="_le">_le</option>
<option value="_lt">_lt</option>
<option value="_ge">_ge</option>
<option value="_gt">_gt</option>
<option value="_like">_like</option>
<option value="_ilike">_ilike</option>
<option value="_startswith">_startswith</option>
<option value="_endswith">_endswith</option>
                </select>
            </div>
            {selectedField &&
                <div className="mb-3">
                    <input
                        className="form-control"
                        type="text"
                        value={operand}
                        onChange={handleOperandChange}
                        placeholder={"Zadej hodnotu"}
                    />
                </div>
            }

            {/* Logická pole */}
            
        </div>
    );
}

export function DatetimeFilterForm({ value = {}, onChange }) {
    // Jediný aktivní field v hodnotě (kromě _and/_or)
    const [selectedField, setSelectedField] = React.useState(Object.keys(value).find(k => !k.startsWith('_')) || "");
    const [operand, setOperand] = React.useState(selectedField ? value[selectedField] : "");

    React.useEffect(() => {
        // Pokud value v props změní pole, aktualizuj stav
        const current = Object.keys(value).find(k => !k.startsWith('_'));
        if (current !== selectedField) {
            setSelectedField(current || "");
            setOperand(current ? value[current] : "");
        }
    }, [value]);

    // Handler změny operátoru
    function handleFieldChange(e) {
        const f = e.target.value;
        setSelectedField(f);
        setOperand("");
        onChange({ [f]: "" }); // Vynuluj ostatní
    }

    // Handler změny hodnoty operand
    function handleOperandChange(e) {
        setOperand(e.target.value);
        onChange({ [selectedField]: e.target.value });
    }

    return (
        <div className="border p-3 mb-3">
            {/* Scalar operátor */}
            <div className="mb-3">
                <label className="form-label">Pole/operátor</label>
                <select className="form-select" value={selectedField} onChange={handleFieldChange}>
                    <option value="">Vyber operátor…</option>
                    <option value="_eq">_eq</option>
<option value="_le">_le</option>
<option value="_lt">_lt</option>
<option value="_ge">_ge</option>
<option value="_gt">_gt</option>
                </select>
            </div>
            {selectedField &&
                <div className="mb-3">
                    <input
                        className="form-control"
                        type="text"
                        value={operand}
                        onChange={handleOperandChange}
                        placeholder={"Zadej hodnotu"}
                    />
                </div>
            }

            {/* Logická pole */}
            
        </div>
    );
}

/**
 * Example usage:
 * <AdmissionInputFilterForm value={where} onChange={setWhere} />
 */
